name: Update Project Status from Comments

on:
  issue_comment:
    types: [created]

jobs:
  update-status:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      repository-projects: write

    steps:
      - name: Check for valid comment
        id: check_comment
        run: |
          COMMENT_BODY="${{ github.event.comment.body }}"
          VALID_STATUSES=("Development" "Todo")

          for STATUS in "${VALID_STATUSES[@]}"; do
            if [[ "$COMMENT_BODY" == "$STATUS" ]]; then
              echo "STATUS=$STATUS" >> $GITHUB_ENV
              exit 0
            fi
          done
          echo "No valid status found."
          exit 1

      - name: Get Issue Project Item ID (For Projects v2)
        id: get_project_id
        env:
          GH_TOKEN: ${{ secrets.CLASSIC_GITHUB_TOKEN }}
        run: |
          echo "Repository: uzairmansoor/test-issue-workflows"
          echo "Issue ID: ${{ github.event.issue.id }}"

          TEST_QUERY='
          {
            repository(owner: "uzairmansoor", name: "test-issue-workflows") {
              issue(number: 1) {
                projectItems(first: 1) {
                  nodes {
                    id
                    project {
                      id
                    }
                  }
                }
              }
            }
          }'

          QUERY='
            {
            repository(owner: "uzairmansoor", name: "test-issue-workflows") {
                issue(number: 1) {
                id
                projectItems(first: 1) {
                    nodes {
                    id
                    project {
                        id
                    }
                    fieldValues(first: 10) {  
                        nodes {
                        id
                        field {
                            id
                            name
                        }
                        ... on ProjectV2ItemFieldTextValue {
                            text
                        }
                        ... on ProjectV2ItemFieldSingleSelectValue {
                            name
                        }
                        ... on ProjectV2ItemFieldNumberValue {
                            number
                        }
                        ... on ProjectV2ItemFieldDateValue {
                            date
                        }
                        }
                    }
                    }
                }
                }
            }
            }'


          RESPONSE=$(gh api graphql -f query="$QUERY")
          echo "$RESPONSE"
          
          PROJECT_ID=$(echo "$RESPONSE" | jq -r '.data.repository.issue.projectItems.nodes[0].project.id')
          ITEM_ID=$(echo "$RESPONSE" | jq -r '.data.repository.issue.projectItems.nodes[0].id')
          ISSUE_ID=$(echo "$RESPONSE" | jq -r '.data.repository.issue.id')
          FIELD_ID=$(echo "$RESPONSE" | jq -r '.data.repository.issue.projectItems.nodes[0].fieldValues.nodes[0].field.id')
          FIELD_VALUE_ID=$(echo "$RESPONSE" | jq -r '.data.repository.issue.projectItems.nodes[0].fieldValues.nodes[0].id')
          FIELD_VALUE=$(echo "$RESPONSE" | jq -r '.data.repository.issue.projectItems.nodes[0].fieldValues.nodes[0].value')

          echo "PROJECT_ID=$PROJECT_ID" >> $GITHUB_ENV
          echo "ITEM_ID=$ITEM_ID" >> $GITHUB_ENV
          echo "ISSUE_ID=$ISSUE_ID" >> $GITHUB_ENV
          echo "FIELD_ID=$FIELD_ID" >> $GITHUB_ENV
          echo "FIELD_VALUE_ID=$FIELD_VALUE_ID" >> $GITHUB_ENV
          echo "FIELD_VALUE=$FIELD_VALUE" >> $GITHUB_ENV

          if [ -z "$PROJECT_ID" ] || [ "$PROJECT_ID" == "null" ]; then
            echo "No project found for this issue."
            exit 1
          fi

          echo "PROJECT_ID=$PROJECT_ID" >> $GITHUB_ENV
          echo "ITEM_ID=$ITEM_ID" >> $GITHUB_ENV

      - name: Update Issue Status
        env:
          GH_TOKEN: ${{ secrets.CLASSIC_GITHUB_TOKEN }}
        run: |
          STATUS_FIELD_ID="YOUR_STATUS_FIELD_ID" # Replace with actual status field ID
          
          gh api graphql -f query='
          mutation {
            updateProjectV2ItemFieldValue(
              input: {
                projectId: "${{ env.PROJECT_ID }}"
                itemId: "${{ env.ITEM_ID }}"
                fieldId: "'$STATUS_FIELD_ID'"
                value: { text: "${{ env.STATUS }}" }
              }
            ) {
              projectV2Item {
                id
              }
            }
          }'

name: Update Project Status from Comments

on:
  issue_comment:
    types: [created]

jobs:
  update-status:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      repository-projects: write

    steps:
      - name: Check for valid comment
        id: check_comment
        run: |
          COMMENT_BODY="${{ github.event.comment.body }}"
          VALID_STATUSES=("Development" "Todo")

          for STATUS in "${VALID_STATUSES[@]}"; do
            if [[ "$COMMENT_BODY" == "$STATUS" ]]; then
              echo "STATUS=$STATUS" >> $GITHUB_ENV
              exit 0
            fi
          done
          echo "No valid status found."
          exit 1

      - name: Get Issue Project ID
        id: get_project_id
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          QUERY='
          {
            repository(owner: "uzairmansoor", name: "test-issue-workflows") {
              issue(number: ${{ github.event.issue.number }}) {
                projectItems(first: 1) {
                  nodes {
                    id
                  }
                }
              }
            }
          }'

          PROJECT_ID=$(gh api graphql -f query="$QUERY" --jq '.data.repository.issue.projectItems.nodes[0].id')
          
          if [ -z "$PROJECT_ID" ] || [ "$PROJECT_ID" == "null" ]; then
            echo "No project found for this issue."
            exit 1
          fi
          
          echo "PROJECT_ID=$PROJECT_ID" >> $GITHUB_ENV

      - name: Update Issue Status
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api graphql -f query='
          mutation {
            updateProjectV2ItemFieldValue(
              input: {
                projectId: "PROJECT_ID"
                itemId: "${{ env.PROJECT_ID }}"
                fieldId: "STATUS_FIELD_ID"
                value: { text: "${{ env.STATUS }}" }
              }
            ) {
              projectV2Item {
                id
              }
            }
          }'

name: Update Project Status from Comments

on:
  issue_comment:
    types: [created]

jobs:
  update-status:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      repository-projects: write

    steps:
      - name: Check for valid comment
        id: check_comment
        run: |
          COMMENT_BODY="${{ github.event.comment.body }}"
          VALID_STATUSES=("Development" "Todo")

          for STATUS in "${VALID_STATUSES[@]}"; do
            if [[ "$COMMENT_BODY" == "$STATUS" ]]; then
              echo "STATUS=$STATUS" >> $GITHUB_ENV
              exit 0
            fi
          done
          echo "No valid status found."
          exit 1

      - name: Get Issue Project Item ID (For Projects v2)
        id: get_project_id
        env:
          GH_TOKEN: ${{ secrets.CLASSIC_GITHUB_TOKEN }}
        run: |
          echo "Repository: uzairmansoor/test-issue-workflows"
          echo "Issue ID: ${{ github.event.issue.id }}"

          QUERY='
          {
            repository(owner: "uzairmansoor", name: "test-issue-workflows") {
              issue(number: 1) {
                projectItems(first: 1) {
                  nodes {
                    id
                    project {
                      id
                    }
                  }
                }
              }
            }
          }'

          RESPONSE=$(gh api graphql -f query="$QUERY")
          echo "$RESPONSE"
          
          PROJECT_ID=$(echo "$RESPONSE" | jq -r '.data.repository.issue.projectItems.nodes[0].project.id')
          ITEM_ID=$(echo "$RESPONSE" | jq -r '.data.repository.issue.projectItems.nodes[0].id')

          echo "$PROJECT_ID"
          echo "$ITEM_ID"

          if [ -z "$PROJECT_ID" ] || [ "$PROJECT_ID" == "null" ]; then
            echo "No project found for this issue."
            exit 1
          fi

          echo "PROJECT_ID=$PROJECT_ID" >> $GITHUB_ENV
          echo "ITEM_ID=$ITEM_ID" >> $GITHUB_ENV
      
      - name: Update Issue Status
        shell: /usr/bin/bash -e {0}
        env:
            GH_TOKEN: ${{ secrets.CLASSIC_GITHUB_TOKEN }}
            STATUS: Development
            PROJECT_ID: PVT_kwHOBORmpM4AzYug
            ITEM_ID: PVTI_lAHOBORmpM4AzYugzgX1a7g
        run: |
            STATUS_FIELD_ID="PVTSSF_lAHOBORmpM4AzYugzgpL_bA"
            STAT_VALUE="\"98236657\""
            
            STATUS_VALUE=$(gh api graphql -f query='
                query {
                    node(id: "PVTSSF_lAHOBORmpM4AzYugzgpL_bA") {
                    ... on ProjectV2SingleSelectField {
                        options {
                        id
                        name
                        }
                    }
                    }
                }' | jq -r '.data.node.options[] | select(.name=="Done") | .id')
            
            gh api graphql -f query='
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: ID!) {
                updateProjectV2ItemFieldValue(
                    input: {
                    projectId: $projectId
                    itemId: $itemId
                    fieldId: $fieldId
                    value: { singleSelectOptionId: $value }
                    }
                ) {
                    projectV2Item {
                    id
                    }
                }
                }' \
                -F projectId="$PROJECT_ID" \
                -F itemId="$ITEM_ID" \
                -F fieldId="$STATUS_FIELD_ID" \
                -F value="$STATUS_VALUE"
    
      - name: Update Issue Status1
        env:
          GH_TOKEN: ${{ secrets.CLASSIC_GITHUB_TOKEN }}
        run: |
          STATUS_FIELD_ID="YOUR_STATUS_FIELD_ID"
          echo "$PROJECT_ID"
          echo "$ITEM_ID"
          gh api graphql -f query='
            {
            node(id: "YOUR_PROJECT_ID") {
                ... on ProjectV2 {
                fields(first: 20) {
                    nodes {
                    ... on ProjectV2SingleSelectField {  # Handle dropdown fields like Status
                        id
                        name
                    }
                    ... on ProjectV2Field {  # Handle other standard fields
                        id
                        name
                    }
                    }
                }
                }
            }
            }'



          gh api graphql -f query='
          mutation {
            updateProjectV2ItemFieldValue(
              input: {
                projectId: "${{ env.PROJECT_ID }}"
                itemId: "${{ env.ITEM_ID }}"
                fieldId: "'$STATUS_FIELD_ID'"
                value: { text: "${{ env.STATUS }}" }
              }
            ) {
              projectV2Item {
                id
              }
            }
          }'
